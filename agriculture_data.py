# -*- coding: utf-8 -*-
"""Agriculture data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SmtXmhwkozlYAFoSyUkTeHH35FGELRgY
"""

!pip install pandas numpy matplotlib seaborn plotly mysql-connector-python sqlalchemy

from google.colab import files

uploaded = files.upload()  # This will prompt you to upload a file

import pandas as pd

df = pd.read_csv('/content/Agricultural Data.csv')
print("File loaded successfully!")
print(df.head())

import pandas as pd

# Check for missing values
print("Missing values before cleaning:\n", df.isnull().sum())

# Fill missing values for numerical columns with median
df.fillna(df.select_dtypes(include=['number']).median(), inplace=True)

# Fill missing values for categorical columns with mode (most frequent value)
df.fillna(df.select_dtypes(include=['object']).mode().iloc[0], inplace=True)

# Convert column names to lowercase and replace spaces with underscores
df.columns = df.columns.str.lower().str.replace(' ', '_')

# Drop duplicate rows
df.drop_duplicates(inplace=True)

# Check for missing values after cleaning
print("Missing values after cleaning:\n", df.isnull().sum())

# Save the cleaned dataset
df.to_csv('/content/cleaned_agriculture_data.csv', index=False)

print("Data cleaning complete! Cleaned dataset saved as 'cleaned_agriculture_data.csv'")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df.to_csv('/content/cleaned_agriculture_data.csv', index=False)


# 1Ô∏è‚É£ Handling Missing Values
# Fill missing values for numerical columns with median
df.fillna(df.select_dtypes(include=['number']).median(), inplace=True)

# Fill missing values for categorical columns with the mode (most frequent value)
df.fillna(df.select_dtypes(include=['object']).mode().iloc[0], inplace=True)

# 2Ô∏è‚É£ Data Cleaning
# Convert column names to lowercase and replace spaces with underscores
df.columns = df.columns.str.lower().str.replace(' ', '_')

# Drop duplicate rows
df.drop_duplicates(inplace=True)

# Save the cleaned dataset
df.to_csv('/content/cleaned_agriculture_data.csv', index=False)

# 3Ô∏è‚É£ Data Visualizations

# üîπ Distribution of "Rice Area" (Example Histogram)
plt.figure(figsize=(10, 5))
sns.histplot(df['rice_area_(1000_ha)'], bins=30, kde=True)
plt.title("Distribution of Rice Area (1000 ha)")
plt.xlabel("Rice Area (1000 ha)")
plt.ylabel("Count")
plt.show()

# üîπ Boxplot for Rice Yield
plt.figure(figsize=(8, 5))
sns.boxplot(y=df['rice_yield_(kg_per_ha)'])
plt.title("Boxplot of Rice Yield")
plt.ylabel("Rice Yield (kg per ha)")
plt.show()

# üîπ Correlation Heatmap (Fix: Use only numerical columns)
plt.figure(figsize=(12, 6))
sns.heatmap(df.select_dtypes(include=['number']).corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap (Numerical Features)")
plt.show()

# üîπ Top 10 States by Total Rice Production
top_states = df.groupby('state_name')['rice_production_(1000_tons)'].sum().nlargest(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=top_states.index, y=top_states.values, palette="viridis")
plt.xticks(rotation=45)
plt.title("Top 10 States by Rice Production")
plt.xlabel("State")
plt.ylabel("Total Rice Production (1000 tons)")
plt.show()

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the cleaned dataset
df = pd.read_csv('/content/cleaned_agriculture_data.csv')

# 1Ô∏è‚É£ Handle Outliers

# Replace negative values (-1) in numerical columns with NaN
num_cols = df.select_dtypes(include=['number']).columns
df[num_cols] = df[num_cols].replace(-1, np.nan)

# Fill missing values after removing outliers
# Fill missing values only for numeric columns
df[num_cols] = df[num_cols].fillna(df[num_cols].median())


# Visualizing outliers using Boxplot
plt.figure(figsize=(12, 6))
sns.boxplot(data=df[num_cols].drop(columns=['year']), orient='h')
plt.title("Boxplot to Identify Outliers")
plt.show()

# 2Ô∏è‚É£ Feature Engineering

# Creating a new column: Production per Hectare for Rice
df['rice_prod_per_ha'] = df['rice_production_(1000_tons)'] / df['rice_area_(1000_ha)']
df['wheat_prod_per_ha'] = df['wheat_production_(1000_tons)'] / df['wheat_area_(1000_ha)']

# Normalize the production per hectare
df['rice_prod_per_ha'] = (df['rice_prod_per_ha'] - df['rice_prod_per_ha'].min()) / (df['rice_prod_per_ha'].max() - df['rice_prod_per_ha'].min())
df['wheat_prod_per_ha'] = (df['wheat_prod_per_ha'] - df['wheat_prod_per_ha'].min()) / (df['wheat_prod_per_ha'].max() - df['wheat_prod_per_ha'].min())

# 3Ô∏è‚É£ Data Visualizations

# Correlation Heatmap
plt.figure(figsize=(10, 5))
sns.heatmap(df[num_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

# Trend Analysis: Rice & Wheat Production over the Years
plt.figure(figsize=(12, 6))
sns.lineplot(x='year', y='rice_production_(1000_tons)', data=df, label="Rice Production", marker="o")
sns.lineplot(x='year', y='wheat_production_(1000_tons)', data=df, label="Wheat Production", marker="s")
plt.title("Trend of Rice and Wheat Production Over the Years")
plt.xlabel("Year")
plt.ylabel("Production (1000 Tons)")
plt.legend()
plt.show()

# Top 5 States by Rice Production
top_states = df.groupby('state_name')['rice_production_(1000_tons)'].sum().nlargest(5)
plt.figure(figsize=(10, 5))
top_states.plot(kind='bar', color='skyblue')
plt.title("Top 5 States by Rice Production")
plt.xlabel("State")
plt.ylabel("Total Rice Production (1000 Tons)")
plt.xticks(rotation=45)
plt.show()

# Pie Chart: Distribution of Agricultural Land Usage
land_usage = df[['fruits_area_(1000_ha)', 'vegetables_area_(1000_ha)', 'fodder_area_(1000_ha)']].sum()
plt.figure(figsize=(8, 8))
land_usage.plot(kind='pie', autopct='%1.1f%%', colors=['gold', 'lightgreen', 'skyblue'])
plt.title("Distribution of Agricultural Land Usage")
plt.ylabel("")
plt.show()

# Save the updated dataset
df.to_csv('/content/eda_agriculture_data.csv', index=False)

# Commented out IPython magic to ensure Python compatibility.
!git config --global user.name "YourGitHubUsername"
!git config --global user.email "YourEmail@example.com"

# Clone your repository (if not already done)
!git clone https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git
# %cd YOUR_REPOSITORY

# Add files and commit changes
!git add .
!git commit -m "Added EDA and Data Cleaning"

# Push changes (replace TOKEN with your GitHub token)
!git push https://YOUR_GITHUB_TOKEN@github.com/YOUR_USERNAME/YOUR_REPOSITORY.git

!pip install mysql-connector-python
import mysql.connector

# Connect to TiDB Cloud
conn = mysql.connector.connect(
    host="gateway01.us-west-2.prod.aws.tidbcloud.com",
    port=4000,
    user="2cG3MBTK8AjfDHM.root",
    password="dYaKCArJUfrmgU85",  # Replace with actual password
    database="AgriData"
)

cursor = conn.cursor()
print("Connected to TiDB Cloud successfully!")

# Query to fetch data
query = "SELECT * FROM Crop_Production;"

# Load data into a Pandas DataFrame
df = pd.read_sql(query, conn)

# Display the first few rows
print(df.head())

cursor.close()
conn.close()
print("Connection closed.")

!jupyter nbconvert --to script Agriculture_data.ipynb